<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.myapp.community.repository.CommunityBoardCommentMapper">
    <!-- 특정 커뮤니티의 모든 댓글 조회 -->
    <select id="getAllComments" parameterType="long" resultType="com.spring.myapp.community.model.CommunityBoardComments">
        SELECT * FROM community_comments WHERE community_id = #{communityId} AND is_deleted = 0
    </select>

    <!-- 새로운 댓글 작성 -->
    <insert id="writeNewComment" parameterType="com.spring.myapp.community.model.CommunityBoardComments">
        INSERT INTO community_comments (community_id, user_id, content, parent_comment_id, created_at, is_deleted)
        VALUES (#{communityId}, #{userId}, #{content}, #{parentCommentId}, NOW(), 0)
    </insert>

    <!-- 특정 댓글 조회 -->
    <select id="getCommentById" parameterType="long" resultType="com.spring.myapp.community.model.CommunityBoardComments">
        SELECT * FROM community_comments WHERE comment_id = #{commentId} AND is_deleted = 0
    </select>

    <!-- 특정 댓글의 답글 조회 -->
    <select id="getRepliesById" parameterType="long" resultType="com.spring.myapp.community.model.CommunityBoardComments">
        SELECT * FROM community_comments WHERE parent_comment_id = #{commentId} AND is_deleted = 0
    </select>

    <!-- 댓글 삭제 (soft delete) -->
    <update id="deleteComment" parameterType="long">
        UPDATE community_comments SET is_deleted = 1 WHERE comment_id = #{commentId}
    </update>

    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="map">
        UPDATE community_comments SET content = #{content}, updated_at = NOW() WHERE comment_id = #{commentId} AND is_deleted = 0
    </update>

    <!-- 특정 커뮤니티의 모든 댓글 삭제 -->
    <delete id="deleteCommentsByCommunityId" parameterType="long">
        DELETE FROM community_comments WHERE community_id = #{communityId}
    </delete>

<!--    <insert id="insertComment" parameterType="com.spring.myapp.community.dto.CommunityBoardCommentDTO">-->
<!--        INSERT INTO community_comments (community_id, user_id, content, created_at, updated_at, is_deleted)-->
<!--        VALUES (#{communityId}, #{userId}, #{content}, NOW(), NOW(), FALSE)-->
<!--    </insert>-->
<!--    -->

<!--    <select id="selectCommentsByCommunityId" resultType="com.spring.myapp.community.dto.CommunityBoardCommentDTO">-->
<!--        SELECT cc.*, u.nickname-->
<!--        FROM community_comments cc-->
<!--        JOIN users u ON cc.user_id = u.user_id-->
<!--        WHERE cc.community_id = #{communityId} AND cc.is_deleted = FALSE-->
<!--    </select>-->
<!--    -->


<!--    <select id="selectCommentById" resultType="com.spring.myapp.community.dto.CommunityBoardCommentDTO">-->
<!--        SELECT cc.*, u.nickname-->
<!--        FROM community_comments cc-->
<!--        JOIN users u ON cc.user_id = u.user_id-->
<!--        WHERE cc.comment_id = #{commentId} AND cc.is_deleted = FALSE-->
<!--    </select>-->
<!--    -->

<!--    <select id="selectCommentByIdAndCommunityId" resultType="com.spring.myapp.community.dto.CommunityBoardCommentDTO">-->
<!--        SELECT cc.*, u.nickname-->
<!--        FROM community_comments cc-->
<!--        JOIN users u ON cc.user_id = u.user_id-->
<!--        WHERE cc.comment_id = #{commentId} AND cc.community_id = #{communityId} AND cc.is_deleted = FALSE-->
<!--    </select>-->
<!--    -->

<!--    <select id="selectRepliesByCommentId" resultType="com.spring.myapp.community.dto.CommunityBoardCommentDTO">-->
<!--        SELECT cc.*, u.nickname-->
<!--        FROM community_comments cc-->
<!--        JOIN users u ON cc.user_id = u.user_id-->
<!--        WHERE cc.parent_comment_id = #{commentId} AND cc.is_deleted = FALSE-->
<!--    </select>-->

<!--    <update id="updateComment">-->
<!--        UPDATE community_comments-->
<!--        SET content = #{content}, updated_at = NOW()-->
<!--        WHERE comment_id = #{commentId}-->
<!--    </update>-->

<!--    &lt;!&ndash; 댓글 삭제 &ndash;&gt;-->
<!--    <delete id="deleteCommentsByCommunityId" parameterType="long">-->
<!--        DELETE FROM community_comments WHERE community_id = #{communityId};-->
<!--    </delete>-->

<!--    <delete id="deleteComment" parameterType="long">-->
<!--        DELETE FROM community_comments WHERE comment_id = #{commentId}-->
<!--    </delete>-->

<!--    <update id="softDeleteComment">-->
<!--        UPDATE community_comments-->
<!--        SET is_deleted = TRUE-->
<!--        WHERE comment_id = #{commentId}-->
<!--    </update>-->


</mapper>
